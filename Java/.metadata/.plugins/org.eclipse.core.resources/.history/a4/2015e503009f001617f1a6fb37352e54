package dbos;

import java.sql.*;
import java.util.Calendar;

public class Pedido {
	private int codPedido, quantidade, codCliente, codPrato;
	private Timestamp horario;
	
	/**
	 * Inicia a intância de Pedido com os valores passados por parâmetro
	 * 
	 * @param codPedido	código único que identifica o pedido
	 * @param quantidade	a quantidade de pratos do pedido
	 * @param codCliente	código do cliente que realizou o pedido
	 * @param codPrato	código do prato pedido pelo cliente
	 * @param horario	horário em que o pedido foi efetuado
	 * @throws Exception	se algum dos valores passados for inválido (para mais informações, veja os setters)
	 */
	public Pedido(int codPedido, int quantidade, int codCliente, int codPrato, Timestamp horario) throws Exception{
		this.setCodPedido(codPedido);
		this.setQuantidade(quantidade);
		this.setCodCliente(codCliente);
		this.setCodPrato(codPrato);
		this.setHorario(horario);
	}
	
	/**
	 * @return	o código do pedido
	 */
	public int getCodPedido() {
		return codPedido;
	}

	/**
	 * @param codPedido	o código do pedido a ser redefinido
	 * @throws Exception	se o código fornecido for menor ou igual a 0
	 */
	public void setCodPedido(int codPedido) throws Exception{
		if (codPedido <= 0)
			throw new Exception ("Código do Pedido inválido");
			
		this.codPedido = codPedido;
	}

	/**
	 * @return	a quantidade de pratos dentro desse pedido
	 */
	public int getQuantidade() {
		return quantidade;
	}

	/**
	 * @param quantidade	a quantidade de pratos a ser redefinida
	 * @throws Exception	se a quantidade de pratos for menor ou igual a 0
	 */
	public void setQuantidade(int quantidade) throws Exception{
		if (quantidade <= 0)
			throw new Exception ("Quantidade inválida");
		
		this.quantidade = quantidade;
	}

	/**
	 * @return o código do cliente que executou o pedido
	 */
	public int getCodCliente() {
		return codCliente;
	}

	/**
	 * @param codCliente	o código do cliente que realizou o pedido a ser redefinido
	 * @throws Exception	se o código do cliente fornecido for menor ou igual a 0
	 */
	public void setCodCliente(int codCliente) throws Exception{
		if (codCliente <= 0)
			throw new Exception ("Código de Cliente inválido");
		
		this.codCliente = codCliente;
	}

	public int getCodPrato() {
		return codPrato;
	}

	public void setCodPrato(int codPrato) throws Exception{
		if (codPrato <= 0)
			throw new Exception ("Código de prato inválido");
		
		this.codPrato = codPrato;
	}

	public Timestamp getHorario() {
		return horario;
	}

	public void setHorario(Timestamp horario) throws Exception{
		Calendar cal = Calendar.getInstance();
		cal.setLenient(false);
		cal.setTime(horario);
		this.horario = (Timestamp)cal.getTime();
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode() {
		final int prime = 31;
		int result = 666;
		result = prime * result + (new Integer(codCliente)).hashCode();
		result = prime * result + (new Integer(codPedido)).hashCode();
		result = prime * result + (new Integer(codPrato)).hashCode();
		result = prime * result + ((horario == null) ? 0 : horario.hashCode());
		result = prime * result + (new Integer(quantidade)).hashCode();
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		
		if (obj == null)
			return false;
		
		if (getClass() != obj.getClass())
			return false;
		
		Pedido other = (Pedido) obj;
		
		if (codCliente != other.codCliente)
			return false;
		
		if (codPedido != other.codPedido)
			return false;
		
		if (codPrato != other.codPrato)
			return false;
		
		if (horario == null) {
			if (other.horario != null)
				return false;
		} else if (!horario.equals(other.horario))
			return false;
		
		if (quantidade != other.quantidade)
			return false;
		
		return true;
	}
	
	
	
	
}
