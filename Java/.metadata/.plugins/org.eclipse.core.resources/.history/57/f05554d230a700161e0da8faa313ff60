package daos;

import java.sql.*;
import banco.de.dados.*;
import Core.*;
import dbos.*;

public class Mesas {
	
	/**
	 * Procura pelo registro com o código passado por parâmetro no banco de dados e informa se ele existe ou não.
	 * 
	 * @param codigo	código de mesa a ser procurado no banco de dados
	 * @return	<code>true</code> se houver registro com o código informado e <code>false</code> caso contrário
	 * @throws Exception	se ocorrer algum erro ao contatar o banco de dados
	 */
	public boolean cadastrado (int codigo) throws Exception
	{
	    boolean retorno = false;
	
	    try
	    {
	        String sql;
	
	        sql = "SELECT * FROM Mesa WHERE codMesas=?";
	
	        DAOs.getBD().prepareStatement (sql);
	
	        DAOs.getBD().setInt (1, codigo);
	
	        MeuResultSet resultado = (MeuResultSet)DAOs.getBD().executeQuery ();
	
	        retorno = resultado.first();
	    }
	    catch (SQLException erro)
	    {
	        throw new Exception ("Erro ao procurar mesa");
	    }
	
	    return retorno;
	}
	
	/**
	 * Inclui um novo registro de mesa no banco de dados
	 *
	 * @param mesa	uma instância da classe Mesa cujos valores das variáveis serão inseridos no banco de dados
	 * @throws Exception	se a mesa fornecida for nula
	 */
	public void incluir (Mesa mesa) throws Exception
    {
        if (mesa==null)
            throw new Exception ("Mesa nao fornecida");

        try
        {
            String sql;

            sql = "INSERT INTO Mesa VALUES (?,?,?,?,?,?,?,?)";

            DAOs.getBD().prepareStatement (sql);

            DAOs.getBD().setInt(1, mesa.getReserva ());
            DAOs.getBD().setTimestamp(2, mesa.getHorario ());
            DAOs.getBD().setTimestamp(3,mesa.getHoraPrevista());
            DAOs.getBD().setString(4,mesa.getFormaPagamento());
            DAOs.getBD().setBigDecimal(5, mesa.getValorTotal());
            DAOs.getBD().setTimestamp(6, mesa.getHoraFechamento());;
            DAOs.getBD().setInt(7, mesa.getStatusMesa());
            DAOs.getBD().setInt(8, mesa.getCodCliente());

            DAOs.getBD().executeUpdate ();
        }
        catch (SQLException erro)
        {
            throw new Exception ("Erro ao inserir mesa");
        }
    }
	
	/**
	 * Exclui do banco de dados um registro de mesa.
	 *
	 * @param codigo	o código da mesa que será excluida do banco de dados
	 * @throws Exception	se o código passado por parâmetro não existir
	 */
	public void excluir (int codigo) throws Exception
    {
        if (!cadastrado (codigo))
            throw new Exception ("Nao cadastrado");

        try
        {
            String sql = "DELETE FROM Mesa WHERE codMesa=?";

            DAOs.getBD().prepareStatement (sql);

            DAOs.getBD().setInt (1, codigo);

            DAOs.getBD().executeUpdate ();
        }
        catch (SQLException erro)
        {
            throw new Exception ("Erro ao excluir mesa");
        }
    }

	/**
	 * Altera um registro de mesa no banco de dados
	 * 
	 * @param mesa	uma instância da classe Mesa que servirá de referência para as alterações a serem feitas no banco de dados
	 * @throws Exception	se a mesa fornecida for nula ou não houver um registro com o código de mesa da instância
	 */
    public void alterar (Mesa mesa) throws Exception
    {
        if (mesa==null)
            throw new Exception ("Mesa não fornecida");

        if (!cadastrado(mesa.getCodMesa()))
            throw new Exception ("Nao cadastrado");

        try
        {
            String sql = "update Mesa set reserva=?, horario=?, horaPrevista=?,formaPagamento=?,valorTotal=?,"
            		+ "horaFechamento=?,statusMesa=?,codCliente=? where codMesa=?";

            DAOs.getBD().prepareStatement (sql);

            DAOs.getBD().setInt(1, mesa.getReserva ());
            DAOs.getBD().setTimestamp(2, mesa.getHorario ());
            DAOs.getBD().setTimestamp(3,mesa.getHoraPrevista());
            DAOs.getBD().setString(4,mesa.getFormaPagamento());
            DAOs.getBD().setBigDecimal(5, mesa.getValorTotal());
            DAOs.getBD().setTimestamp(6, mesa.getHoraFechamento());;
            DAOs.getBD().setInt(7, mesa.getStatusMesa());
            DAOs.getBD().setInt(8, mesa.getCodCliente());
            DAOs.getBD().setInt(9, mesa.getCodMesa ());

            DAOs.getBD().executeUpdate ();
        }
        catch (SQLException erro)
        {
            throw new Exception ("Erro ao atualizar dados de mesa");
        }
    }
    
    /**
     * Retorna as informações da mesa com o código informado
     * 
     * @param codigo	o código da mesa que será procurado no banco de dados
     * @return	uma instância da classe Mesa cujo código seja igual ao parâmetro
     * @throws Exception	se não houver mesa com o código fornecido ou ocorrer algum erro ao conectar com o banco de dados
     */
    public Mesa getMesa (int codigo) throws Exception
    {
        Mesa mesa = null;

        try
        {
            String sql = "SELECT * FROM Mesa WHERE codMesa = ?";

            DAOs.getBD().prepareStatement (sql);

            DAOs.getBD().setInt (1, codigo);

            MeuResultSet resultado = (MeuResultSet)DAOs.getBD().executeQuery ();

            if (!resultado.first())
                throw new Exception ("Nao cadastrado");

            mesa = new Mesa(resultado.getInt("codMesa"),resultado.getInt("reserva"),resultado.getInt("statusMesa"),
            		resultado.getInt("codCliente"),resultado.getTimestamp("horario"),
            		resultado.getTimestamp("horaPrevista"),resultado.getTimestamp("horaFechamento"),
            		resultado.getString("formaPagamento"),resultado.getBigDecimal("valorTotal"));
        }
        catch (SQLException erro)
        {
            throw new Exception ("Erro ao procurar livro");
        }

        return mesa;
    }

    /**
     * Retorna todas as mesas do banco de dados
     * 
     * @return	uma instância de MeuResultSet com todas as mesas do banco de dados
     * @throws Exception	se houver algum erro ao conectar com o banco de dados
     */
    public MeuResultSet getMesas () throws Exception
    {
        MeuResultSet resultado = null;

        try
        {
            String sql = "SELECT * FROM Mesas";

            DAOs.getBD().prepareStatement (sql);

            resultado = (MeuResultSet)DAOs.getBD().executeQuery ();
        }
        catch (SQLException erro)
        {
            throw new Exception ("Erro ao recuperar mesas");
        }

        return resultado;
    }
	
	public MeuResultSet getMesasOrdenado (String condicao, String campo,boolean desc) throws Exception {
		MeuResultSet resultado = null;
		
		try
		{
			String sql = "SELECT * FROM Mesa ";
					
			if ((condicao != null)||(!condicao.equals("")))
				sql += " WHERE " + condicao + " ";
			
			"ORDER BY " + campo;
			if (desc)
				sql += " DESC";
			
			DAOs.getBD().prepareStatement(sql);
			
			resultado = (MeuResultSet)DAOs.getBD().executeQuery();
		}
		catch (SQLException erro)
		{
			throw new Exception ("Erro ao recuperar clientes");
		}
		
		return resultado;
	}
}
